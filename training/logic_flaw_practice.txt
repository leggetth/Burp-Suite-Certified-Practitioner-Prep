- Excessive trust
-- Just change the price

- High level
-- You can use negative quantity to subtract

- Inconsistent controls
-- Use engagement tools -> discovery content to find /admin
-- Notice message that says users must use employee email
-- Create account with your email
-- Change it to the employee email

- Flawed enforcement
-- Coupon codes can be alternated

- low level
-- There is a max quantity of 99
-- In intruder if you use infinite null payload you can send 99 a bunch of times
-- Eventually the number becomes negative because you hit the max int that can be stored
-- To solve:
-- -- Send 323 payloads of the jacket
-- -- In repeater order 47 jackets
-- -- add another item until price is between 0 and 100

- Inconsistent handling of input
-- Supply long email, email is truncated in UI

- Weak isolation
-- Attempt to delete parameters
-- On this one, you could reset password without the current password

- Insufficient workflow 
-- When you order the checkout would redirect to this: https://0a6900f203a7c6a181af3514003d0067.web-security-academy.net/cart/order-confirmation?order-confirmed=true
-- All you need to do is add the jacket and send this request without clicking checkout

- Auth bypass via Flawed state machine
-- All I had to do was cause the role-selector request to fail after login
-- Role default was admin

- Infinite money logic
-- The coupon code could be used once on each purchase, so you could buy infinite $10 gift cards for $7
-- To solve:
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Go to "Project options" > "Sessions". In the "Session handling rules" panel, click "Add". The "Session handling rule editor" dialog opens.
In the dialog, go to the "Scope" tab. Under "URL Scope", select "Include all URLs".
Go back to the "Details" tab. Under "Rule actions", click "Add" > "Run a macro". Under "Select macro", click "Add" again to open the Macro Recorder.

Select the following sequence of requests:
POST /cart
POST /cart/coupon
POST /cart/checkout
GET /cart/order-confirmation?order-confirmed=true
POST /gift-card

Then, click "OK". The Macro Editor opens.
In the list of requests, select GET /cart/order-confirmation?order-confirmed=true. Click "Configure item". 
In the dialog that opens, click "Add" to create a custom parameter. 
Name the parameter gift-card and highlight the gift card code at the bottom of the response. Click "OK" twice to go back to the Macro Editor.
Select the POST /gift-card request and click "Configure item" again. 
In the "Parameter handling" section, use the drop-down menus to specify that the gift-card parameter should be derived from the prior response (response 10). 
Click "OK".
In the Macro Editor, click "Test macro". 
Look at the response to GET /cart/order-confirmation?order-confirmation=true and note the gift card code that was generated. 
Look at the POST /gift-card request. Make sure that the gift-card parameter matches and confirm that it received a 302 response. 
Keep clicking "OK" until you get back to the main Burp window. 
Lauch and intruder attack using null payload and the my-account get request
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

- Encryption Oracle
-- The stay logged in cookie was encrypted
-- If you put in a bad email, the notification cookie would be "invalid email: " email
-- So deleted chars in the cookie to find it accepted 16 byte blocks
-- Decrypted my stay logged in cookie using notification cookie field
-- -- format: user:timestamp
-- Used payload: xxxxxxxxxadministrator:timestamp
-- -- Sent to decoder and decoded as url and base 64
-- -- Then used hex editor to delete 32 bytes and get: administrator:timestamp
-- -- re encoded the cookie
-- Deleted session cookie from GET /
-- -- inserted the new stay logged in cookie